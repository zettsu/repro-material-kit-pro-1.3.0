{"remainingRequest":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/src/views/Index.vue?vue&type=template&id=23543608&","dependencies":[{"path":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/src/views/Index.vue","mtime":1607335908000},{"path":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/joolivera/personal_workspace/repro-material-kit-pro-1.3.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAid3JhcHBlciIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgInBhcmFsbGF4IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicGFnZS1oZWFkZXIgaGVhZGVyLWZpbHRlciIsIHN0eWxlOiBfdm0uaGVhZGVyU3R5bGUgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dC1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZS13cmFwcGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxlYWZTaG93LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxlYWZTaG93IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsZWFmNCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmxlYWY0LCBhbHQ6ICJsZWFmNCIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxlYWZTaG93LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxlYWZTaG93IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsZWFmMyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmxlYWYzLCBhbHQ6ICJsZWFmMyIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxlYWZTaG93LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxlYWZTaG93IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsZWFmMiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmxlYWYyLCBhbHQ6ICJsZWFmMiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxlYWZTaG93LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxlYWZTaG93IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsZWFmMSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmxlYWYxLCBhbHQ6ICJsZWFmMSIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJyYW5kIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIlZ1ZSBNYXRlcmlhbCBLaXQiKV0pLAogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBIEJhZGFzcyBWdWUuanMgVUkgS2l0IG1hZGUgd2l0aCBNYXRlcmlhbCBEZXNpZ24uIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4gbWFpbi1yYWlzZWQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24gc2VjdGlvbi1iYXNpYyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LAogICAgICAgICAgICBbX3ZtLl9tKDApLCBfYygiYmFzaWMtZWxlbWVudHMiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInNlY3Rpb24gc2VjdGlvbi1uYXZiYXJzIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LAogICAgICAgICAgICAgIFtfYygic21hbGwtbmF2aWdhdGlvbiIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJuYXZpZ2F0aW9uIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24gc2VjdGlvbi10YWJzIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgW19jKCJ0YWJzIildLCAxKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbiBzZWN0aW9uLXdoaXRlIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgW19jKCJuYXYtcGlsbHMiKV0sIDEpCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIHNlY3Rpb24tbm90aWZpY2F0aW9ucyIgfSwKICAgICAgICAgIFtfdm0uX20oMSksIF9jKCJub3RpZmljYXRpb25zIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgW19jKCJ0eXBvZ3JhcGh5LWltYWdlcyIpXSwgMSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24gc2VjdGlvbi1qYXZhc2NyaXB0IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sCiAgICAgICAgICAgIFtfYygiamF2YXNjcmlwdC1jb21wb25lbnRzIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VjdGlvbiBzZWN0aW9uLXNpZ251cCBwYWdlLWhlYWRlciIsCiAgICAgICAgICAgIHN0eWxlOiBfdm0uc2lnbnVwSW1hZ2UKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZC1sYXlvdXQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgIm1kLWxheW91dC1pdGVtIG1kLXNpemUtMzMgbWQtbWVkaXVtLXNpemUtNDAgbWQtc21hbGwtc2l6ZS01MCBtZC14c21hbGwtc2l6ZS03MCBteC1hdXRvIHRleHQtY2VudGVyIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibG9naW4tY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7ICJoZWFkZXItY29sb3IiOiAiZ3JlZW4iIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogInRpdGxlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInRpdGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTG9naW4iKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZC1qdXN0LWljb24gbWQtc2ltcGxlIG1kLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJidXR0b25zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAiYnV0dG9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtZmFjZWJvb2stc3F1YXJlIiB9KV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZC1qdXN0LWljb24gbWQtc2ltcGxlIG1kLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJidXR0b25zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAiYnV0dG9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtdHdpdHRlciIgfSldCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZC1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWQtanVzdC1pY29uIG1kLXNpbXBsZSBtZC13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAiYnV0dG9ucyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogImJ1dHRvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWdvb2dsZS1wbHVzLWciIH0pXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiAiZGVzY3JpcHRpb24iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAiZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJPciBCZSBDbGFzc2ljYWwiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kLWZpZWxkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kLWZvcm0tZ3JvdXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImlucHV0cyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJpbnB1dHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWQtaWNvbiIsIFtfdm0uX3YoImZhY2UiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgW192bS5fdigiRmlyc3QgTmFtZS4uLiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWQtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maXJzdG5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmZpcnN0bmFtZSA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZpcnN0bmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kLWZpZWxkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kLWZvcm0tZ3JvdXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImlucHV0cyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJpbnB1dHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWQtaWNvbiIsIFtfdm0uX3YoImVtYWlsIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIkVtYWlsLi4uIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZC1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImVtYWlsIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZW1haWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVtYWlsID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZC1maWVsZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZC1mb3JtLWdyb3VwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJpbnB1dHMiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAiaW5wdXRzIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kLWljb24iLCBbX3ZtLl92KCJsb2NrX291dGxpbmUiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgW192bS5fdigiUGFzc3dvcmQuLi4iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucGFzc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnBhc3N3b3JkID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZC1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWQtc2ltcGxlIG1kLXN1Y2Nlc3MgbWQtbGciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImZvb3RlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJmb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgR2V0IFN0YXJ0ZWQgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWQtbGF5b3V0IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtZC1sYXlvdXQtaXRlbSB0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgIm1kLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWQtc2ltcGxlIG1kLXN1Y2Nlc3MgbWQtbGciLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIy9sb2dpbiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIlZpZXcgTG9naW4gUGFnZSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbiBzZWN0aW9uLWV4YW1wbGVzIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWQtbGF5b3V0LWl0ZW0iIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIy9sYW5kaW5nIiwgdGFyZ2V0OiAiX2JsYW5rIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmFpc2VkIHJvdW5kZWQgaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmxhbmRpbmcsIGFsdDogIlJvdW5kZWQgSW1hZ2UiIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgIm1kLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZC1zaW1wbGUgbWQtc3VjY2VzcyBtZC1sZyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIy9sYW5kaW5nIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJWaWV3IExhbmRpbmcgUGFnZSIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtZC1sYXlvdXQtaXRlbSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjL3Byb2ZpbGUiLCB0YXJnZXQ6ICJfYmxhbmsiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yYWlzZWQgcm91bmRlZCBpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0ucHJvZmlsZSwgYWx0OiAiUm91bmRlZCBJbWFnZSIgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAibWQtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kLXNpbXBsZSBtZC1zdWNjZXNzIG1kLWxnIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjL3Byb2ZpbGUiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlZpZXcgUHJvZmlsZSBQYWdlIildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInNlY3Rpb24gc2VjdGlvbi1kb3dubG9hZCIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZG93bmxvYWRTZWN0aW9uIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWQtbGF5b3V0IHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJtZC1sYXlvdXQtaXRlbSBtZC1zaXplLTUwIG1kLXNtYWxsLXNpemUtMTAwIG14LWF1dG8iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZC1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kLXN1Y2Nlc3MgbWQtbGciLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuY3JlYXRpdmUtdGltLmNvbS9wcm9kdWN0L21hdGVyaWFsLWtpdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtaHRtbDUiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGcmVlIEhUTUwgRG93bmxvYWQiKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWQtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtZC1zdWNjZXNzIG1kLWxnIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdGhlbWVpc2xlLmNvbS90aGVtZXMvaGVzdGlhLz91dG1fY2FtcGFpZ249bWtmcmVlLWhlc3RpYSZ1dG1fc291cmNlPWNyZWF0aXZldGltJnV0bV9tZWRpdW09d2Vic2l0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtd29yZHByZXNzIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgV29yZHByZXNzIFRoZW1lIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dCB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAibWQtbGF5b3V0LWl0ZW0gbWQtc2l6ZS01MCBtZC1zbWFsbC1zaXplLTEwMCBteC1hdXRvIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJidG4tY29udGFpbmVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWQtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kLWJ1dHRvbiBtZC1zdWNjZXNzIG1kLWxnIG1kLXVwZ3JhZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuY3JlYXRpdmUtdGltLmNvbS9wcm9kdWN0L3Z1ZS1tYXRlcmlhbC1raXQtcHJvP3JlZj11dHAtdm1rLWRlbW9zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kLWljb24iLCBbX3ZtLl92KCJ1bmFyY2hpdmUiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJWdWUgTWF0ZXJpYWwgS2l0IFBSTyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZC1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWQtYnV0dG9uIG1kLXN1Y2Nlc3MgbWQtbGcgbWQtdXBncmFkZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jcmVhdGl2ZS10aW0uY29tL3Byb2R1Y3QvdnVlLW1hdGVyaWFsLWRhc2hib2FyZC1wcm8/cmVmPXV0cC12bWQtZGVtb3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWQtaWNvbiIsIFtfdm0uX3YoInVuYXJjaGl2ZSIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlZ1ZSBNYXRlcmlhbCBEYXNoYm9hcmQgUFJPIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInNoYXJpbmctYXJlYSB0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgICAgICAgICBfYygibWQtYnV0dG9uIiwgeyBzdGF0aWNDbGFzczogIm1kLXR3aXR0ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtdHdpdHRlciIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUd2VldCIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibWQtYnV0dG9uIiwgeyBzdGF0aWNDbGFzczogIm1kLWZhY2Vib29rIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWZhY2Vib29rLXNxdWFyZSIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU2hhcmUiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoIm1kLWJ1dHRvbiIsIHsgc3RhdGljQ2xhc3M6ICJtZC1nb29nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtZ29vZ2xlLXBsdXMiIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFNoYXJlIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJtZC1idXR0b24iLCB7IHN0YXRpY0NsYXNzOiAibWQtZ2l0aHViIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWdpdGh1YiIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU3RhciIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICBfYygiaDIiLCBbX3ZtLl92KCJCYXNpYyBFbGVtZW50cyIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFtfYygiaDMiLCBbX3ZtLl92KCJOb3RpZmljYXRpb25zIildKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAibWQtbGF5b3V0LWl0ZW0gbWQtc2l6ZS02NiBtZC14c21hbGwtc2l6ZS0xMDAgbWwtYXV0byBtci1hdXRvIHRleHQtY2VudGVyIgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiQ29tcGxldGVkIHdpdGggZXhhbXBsZXMiKV0pLAogICAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBUaGUga2l0IGNvbWVzIHdpdGggdGhyZWUgcHJlLWJ1aWx0IHBhZ2VzIHRvIGhlbHAgeW91IGdldCBzdGFydGVkIGZhc3Rlci4gWW91IGNhbiBjaGFuZ2UgdGhlIHRleHQgYW5kIGltYWdlcyBhbmQgeW91J3JlIGdvb2QgdG8gZ28uIE1vcmUgaW1wb3J0YW50bHksIGxvb2tpbmcgYXQgdGhlbSB3aWxsIGdpdmUgeW91IGEgcGljdHVyZSBvZiB3aGF0IHlvdSBjYW4gYnVpbHQgd2l0aCB0aGlzIHBvd2VyZnVsIGtpdC4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibWQtbGF5b3V0LWl0ZW0gbWQtc2l6ZS02NiBtZC1zbWFsbC1zaXplLTEwMCBteC1hdXRvIiB9LAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiRG8geW91IGxvdmUgdGhpcyBVSSBLaXQ/IildKSwKICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQ2F1c2UgaWYgeW91IGRvLCBpdCBjYW4gYmUgeW91cnMgZm9yIEZSRUUuIEhpdCB0aGUgYnV0dG9ucyBiZWxvdyB0byBuYXZpZ2F0ZSB0byBvdXIgd2Vic2l0ZSB3aGVyZSB5b3UgY2FuIGZpbmQgdGhlIGtpdC4gT3VyIGZyaWVuZHMgZnJvbSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly90aGVtZWlzbGUuY29tLz91dG1fY2FtcGFpZ249bWtmcmVlLWhlc3RpYSZ1dG1fc291cmNlPWNyZWF0aXZldGltJnV0bV9tZWRpdW09d2Vic2l0ZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJUaGVtZUlzbGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgY3JlYXRlZCBhIFdvcmRwcmVzcyBUaGVtZSB3aGljaCBjYW4gYmUgYWxzbyBkb3dubG9hZGVkIGZvciBmcmVlLiBTdGFydCBhIG5ldyBwcm9qZWN0IG9yIGdpdmUgYW4gb2xkIEJvb3RzdHJhcCBwcm9qZWN0IGEgbmV3IGxvb2shICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dC1pdGVtIG1kLXNpemUtNjYgbWQtc21hbGwtc2l6ZS0xMDAgbXgtYXV0byIgfSwKICAgICAgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIldhbnQgbW9yZT8iKV0pLAogICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgIF92bS5fdigiIFdlJ3ZlIGp1c3QgbGF1bmNoZWQgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jcmVhdGl2ZS10aW0uY29tL3Byb2R1Y3QvdnVlLW1hdGVyaWFsLWRhc2hib2FyZC1wcm8/cmVmPXV0cC1tay1kZW1vcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJWdWUgTWF0ZXJpYWwgRGFzaGJvYXJkIFBSTyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmNyZWF0aXZlLXRpbS5jb20vcHJvZHVjdC92dWUtbWF0ZXJpYWwta2l0LXBybz9yZWY9dXRwLXZtay1kZW1vcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJWdWUgTWF0ZXJpYWwgS2l0IFBSTyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gRXZlcnkgcHJvZHVjdCBoYXMgYSBodWdlIG51bWJlciBvZiBjb21wb25lbnRzLCBzZWN0aW9ucyBhbmQgZXhhbXBsZSBwYWdlcy4gU3RhcnQgWW91ciBEZXZlbG9wbWVudCBXaXRoIEEgQmFkYXNzIEJvb3RzdHJhcCBVSSBLaXQgaW5zcGlyZWQgYnkgTWF0ZXJpYWwgRGVzaWduLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWxheW91dC1pdGVtIiB9LCBbCiAgICAgICAgX2MoImgzIiwgW192bS5fdigiVGhhbmsgeW91IGZvciBzdXBwb3J0aW5nIHVzISIpXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}